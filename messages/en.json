{
  "common": {
    "language": "Language",
    "english": "English",
    "chinese": "中文",
    "menu": "Menu",
    "close": "Close"
  },
  "navigation": {
    "features": "Features",
    "playground": "Playground",
    "docs": "Documentation",
    "resources": "Resources", 
    "servers": "MCP Servers",
    "blog": "Blog",
    "faq": "FAQ"
  },
  "hero": {
    "title": "Making AI Context Understanding Possible",
    "subtitle": "Empowering AI applications to enter the MCP standard era, enabling true collaboration between context, protocols, and models",
    "tryPlayground": "Try Playground",
    "readDocs": "Read Documentation"
  },
  "features": {
    "title": "Core MCP Capabilities",
    "subtitle": "Discover the three foundational pillars that make MCP the future of AI context management",
    "contextStandardization": {
      "title": "Context Standardization",
      "description": "Establish unified context protocols that enable seamless communication between different AI models and applications, ensuring consistent understanding across platforms."
    },
    "multiModelCollaboration": {
      "title": "Multi-Model Collaboration", 
      "description": "Enable dynamic collaboration between multiple AI models through standardized interfaces, allowing complex tasks to be distributed across specialized model capabilities."
    },
    "serverArchitecture": {
      "title": "Server Architecture",
      "description": "Deploy scalable MCP servers that manage context, handle protocol communications, and orchestrate AI model interactions with enterprise-grade reliability."
    }
  },
  "playground": {
    "title": "MCP Resource Collection Tool",
    "subtitle": "Intelligently search and collect MCP-related resources, generating detailed analysis reports",
    "documentUpload": {
      "title": "Document Upload",
      "description": "Upload and process various document formats to establish rich context for AI models"
    },
    "contextConfiguration": {
      "title": "Context Configuration", 
      "description": "Set up and manage context parameters to optimize AI model performance and understanding"
    },
    "modelSelection": {
      "title": "Model Selection",
      "description": "Choose from multiple AI models and configure collaboration patterns for complex tasks"
    },
    "launchPlayground": "Launch Playground"
  },
  "documentation": {
    "title": "Technical Documentation",
    "subtitle": "Comprehensive guides covering MCP protocol structure, server architecture, and API implementation details",
    "quickStart": {
      "title": "Quick Start Guide",
      "description": "Get started with MCP in minutes with our step-by-step guide"
    },
    "protocolSpec": {
      "title": "Protocol Specification",
      "description": "Complete MCP protocol documentation and standards"
    },
    "serverDevelopment": {
      "title": "Server Development",
      "description": "Build and deploy your own MCP servers"
    },
    "apiReference": {
      "title": "API Reference",
      "description": "Detailed API documentation for all MCP endpoints"
    },
    "examples": {
      "title": "Code Examples",
      "description": "Real-world examples and implementation patterns"
    },
    "bestPractices": {
      "title": "Best Practices",
      "description": "Expert recommendations for MCP implementation"
    }
  },
  "resources": {
    "title": "MCP Resources",
    "subtitle": "Comprehensive collection of resources to learn and implement Model Context Protocol",
    "officialDocs": {
      "title": "Official Documentation",
      "description": "Authoritative resources from the MCP community"
    },
    "platformGuides": {
      "title": "Platform Guides", 
      "description": "Implementation guides for major AI platforms"
    },
    "communityResources": {
      "title": "Community Resources",
      "description": "Tutorials, articles, and discussions from the community"
    },
    "viewResource": "View Resource",
    "externalLink": "External Link"
  },
  "servers": {
    "title": "MCP Servers",
    "subtitle": "Discover and explore available MCP servers and their capabilities",
    "serverDirectory": {
      "title": "Server Directory", 
      "description": "Browse the comprehensive directory of MCP servers"
    },
    "communityServers": {
      "title": "Community Servers",
      "description": "Servers built and maintained by the community"
    },
    "discussions": {
      "title": "Community Discussions",
      "description": "Join conversations about MCP implementation and usage"
    },
    "exploreServers": "Explore Servers"
  },
  "footer": {
    "description": "Making AI context understanding possible through standardized protocols and collaborative architectures.",
    "quickLinks": "Quick Links",
    "resources": "Resources", 
    "community": "Community",
    "copyright": "© 2025 AIMCP. All rights reserved."
  },
  "docs": {
    "title": "Technical Documentation",
    "subtitle": "Complete technical guide for AIMCP project",
    "navigation": "Documentation Navigation",
    "gettingStarted": {
      "title": "Getting Started",
      "subtitle": "Follow these steps to quickly set up and run the AIMCP project",
      "systemRequirements": "System Requirements",
      "installationSteps": "Installation Steps",
      "step1": "1. Clone the repository:",
      "step2": "2. Install dependencies:",
      "step3": "3. Start development server:",
      "step4": "4. Open in browser:",
      "requirements": {
        "nodejs": "Node.js 18.0 or higher",
        "npm": "npm or yarn package manager",
        "git": "Git version control",
        "browser": "Modern browser (Chrome, Firefox, Safari, Edge)"
      }
    },
    "architecture": {
      "title": "Project Architecture",
      "subtitle": "Understand the technical architecture and component design of AIMCP project",
      "techStack": "Tech Stack",
      "directoryStructure": "Directory Structure",
      "frontend": "Frontend Framework",
      "uiComponents": "UI Components",
      "i18n": "Internationalization",
      "devTools": "Development Tools",
      "i18nSupport": "Bilingual Support",
      "dynamicRoutes": "Dynamic Routes"
    },
    "api": {
      "title": "API Documentation",
      "subtitle": "Detailed API interface descriptions and usage examples",
      "mcpCollectApi": "MCP Resource Collection API",
      "progressApi": "Progress Query API",
      "startCollection": "Start MCP resource collection task",
      "queryProgress": "Query collection task progress",
      "requestParams": "Request Parameters:",
      "responseExample": "Response Example:",
      "queryParams": "Query Parameters:",
      "taskStarted": "Collection task started",
      "estimatedTime": "2-5 minutes",
      "currentStep": "Collecting GitHub resources...",
      "resourcesFound": "resources found",
      "timeRemaining": "1 minute"
    },
    "components": {
      "title": "Component Documentation",
      "subtitle": "Usage guide for main React components in the project",
      "mcpCollectorTool": "Main component for MCP resource collection tool",
      "languageSwitcher": "Language switching component",
      "features": "Features:",
      "supportedLanguages": "Supported Languages:",
      "usageExample": "Usage Example:",
      "featuresList": {
        "customKeywords": "Custom search keywords",
        "realTimeProgress": "Real-time progress display",
        "resourceFiltering": "Resource classification and filtering",
        "dataVisualization": "Statistical data visualization",
        "exportFormats": "Export JSON/CSV formats"
      }
    },
    "deployment": {
      "title": "Deployment Guide",
      "subtitle": "How to deploy the project to production environment",
      "vercelDeployment": "Vercel Deployment (Recommended)",
      "netlifyDeployment": "Netlify Deployment",
      "dockerDeployment": "Docker Deployment",
      "vercelDescription": "Vercel is the native deployment platform for Next.js, providing the best performance and experience.",
      "netlifyDescription": "Netlify also provides excellent static website hosting services.",
      "dockerDescription": "Deploy using Docker containerization.",
      "steps": "Steps:",
      "buildSettings": "Build Settings:",
      "dockerfile": "Dockerfile:",
      "buildAndRun": "Build and Run:",
      "cliDeployment": "CLI Deployment:",
      "deploymentSteps": {
        "pushToGithub": "1. Push code to GitHub repository",
        "importProject": "2. Import project in Vercel",
        "configureEnv": "3. Configure environment variables (if needed)",
        "deploy": "4. Click deploy"
      }
    },
    "configuration": {
      "title": "Configuration Guide",
      "subtitle": "Description of various configuration files and options in the project",
      "i18nConfig": "Internationalization Configuration",
      "nextjsConfig": "Next.js Configuration",
      "tailwindConfig": "Tailwind CSS Configuration",
      "configFile": "Configuration File:",
      "addNewLanguage": "Adding New Language:",
      "languageSteps": {
        "step1": "1. Add new language file in messages/ directory",
        "step2": "2. Update locales array in middleware.ts",
        "step3": "3. Add new option in LanguageSwitcher component"
      }
    }
  }
} 