{
  "common": {
    "language": "语言",
    "english": "English",
    "chinese": "中文",
    "menu": "菜单",
    "close": "关闭"
  },
  "navigation": {
    "features": "功能特性",
    "playground": "交互体验",
    "docs": "技术文档",
    "resources": "学习资源", 
    "servers": "MCP 服务器",
    "blog": "技术博客",
    "faq": "常见问题"
  },
  "hero": {
    "title": "让 AI 上下文理解成为可能",
    "subtitle": "赋能 AI 应用进入 MCP 标准化时代，实现上下文、协议与模型的真正协作",
    "tryPlayground": "体验演示",
    "readDocs": "阅读文档"
  },
  "features": {
    "title": "MCP 核心能力",
    "subtitle": "探索构成 MCP 成为 AI 上下文管理未来的三大基础支柱",
    "contextStandardization": {
      "title": "上下文标准化",
      "description": "建立统一的上下文协议，实现不同 AI 模型和应用之间的无缝通信，确保跨平台的一致理解。"
    },
    "multiModelCollaboration": {
      "title": "多模型协作", 
      "description": "通过标准化接口实现多个 AI 模型的动态协作，允许复杂任务在专业化模型能力间分布执行。"
    },
    "serverArchitecture": {
      "title": "服务器架构",
      "description": "部署可扩展的 MCP 服务器，管理上下文、处理协议通信，并以企业级可靠性编排 AI 模型交互。"
    }
  },
  "playground": {
    "title": "MCP 资源收集工具",
    "subtitle": "智能搜索和收集 MCP 相关资源，生成详细的分析报告",
    "documentUpload": {
      "title": "文档上传",
      "description": "上传和处理各种文档格式，为 AI 模型建立丰富的上下文"
    },
    "contextConfiguration": {
      "title": "上下文配置", 
      "description": "设置和管理上下文参数，优化 AI 模型性能和理解能力"
    },
    "modelSelection": {
      "title": "模型选择",
      "description": "从多个 AI 模型中选择，并为复杂任务配置协作模式"
    },
    "launchPlayground": "启动演示"
  },
  "documentation": {
    "title": "技术文档",
    "subtitle": "涵盖 MCP 协议结构、服务器架构和 API 实现细节的全面指南",
    "quickStart": {
      "title": "快速开始",
      "description": "通过我们的分步指南在几分钟内开始使用 MCP"
    },
    "protocolSpec": {
      "title": "协议规范",
      "description": "完整的 MCP 协议文档和标准"
    },
    "serverDevelopment": {
      "title": "服务器开发",
      "description": "构建和部署您自己的 MCP 服务器"
    },
    "apiReference": {
      "title": "API 参考",
      "description": "所有 MCP 端点的详细 API 文档"
    },
    "examples": {
      "title": "代码示例",
      "description": "真实世界的示例和实现模式"
    },
    "bestPractices": {
      "title": "最佳实践",
      "description": "MCP 实现的专家建议"
    }
  },
  "resources": {
    "title": "MCP 学习资源",
    "subtitle": "学习和实现模型上下文协议的全面资源集合",
    "officialDocs": {
      "title": "官方文档",
      "description": "来自 MCP 社区的权威资源"
    },
    "platformGuides": {
      "title": "平台指南", 
      "description": "主要 AI 平台的实现指南"
    },
    "communityResources": {
      "title": "社区资源",
      "description": "来自社区的教程、文章和讨论"
    },
    "viewResource": "查看资源",
    "externalLink": "外部链接"
  },
  "servers": {
    "title": "MCP 服务器",
    "subtitle": "发现和探索可用的 MCP 服务器及其功能",
    "serverDirectory": {
      "title": "服务器目录", 
      "description": "浏览 MCP 服务器的综合目录"
    },
    "communityServers": {
      "title": "社区服务器",
      "description": "由社区构建和维护的服务器"
    },
    "discussions": {
      "title": "社区讨论",
      "description": "加入关于 MCP 实现和使用的对话"
    },
    "exploreServers": "探索服务器"
  },
  "footer": {
    "description": "通过标准化协议和协作架构让 AI 上下文理解成为可能。",
    "quickLinks": "快捷链接",
    "resources": "学习资源", 
    "community": "社区",
    "copyright": "© 2025 AIMCP. 保留所有权利。"
  },
  "docs": {
    "title": "技术文档",
    "subtitle": "AIMCP 项目完整技术指南",
    "navigation": "文档导航",
    "gettingStarted": {
      "title": "快速开始",
      "subtitle": "按照以下步骤快速设置和运行 AIMCP 项目",
      "systemRequirements": "系统要求",
      "installationSteps": "安装步骤",
      "step1": "1. 克隆项目仓库：",
      "step2": "2. 安装依赖：",
      "step3": "3. 启动开发服务器：",
      "step4": "4. 在浏览器中访问：",
      "requirements": {
        "nodejs": "Node.js 18.0 或更高版本",
        "npm": "npm 或 yarn 包管理器",
        "git": "Git 版本控制",
        "browser": "现代浏览器（Chrome、Firefox、Safari、Edge）"
      }
    },
    "architecture": {
      "title": "项目架构",
      "subtitle": "了解 AIMCP 项目的技术架构和组件设计",
      "techStack": "技术栈",
      "directoryStructure": "目录结构",
      "frontend": "前端框架",
      "uiComponents": "UI 组件",
      "i18n": "国际化",
      "devTools": "开发工具",
      "i18nSupport": "中英双语支持",
      "dynamicRoutes": "动态路由"
    },
    "api": {
      "title": "API 文档",
      "subtitle": "详细的 API 接口说明和使用示例",
      "mcpCollectApi": "MCP 资源收集 API",
      "progressApi": "进度查询 API",
      "startCollection": "启动 MCP 资源收集任务",
      "queryProgress": "查询收集任务进度",
      "requestParams": "请求参数：",
      "responseExample": "响应示例：",
      "queryParams": "查询参数：",
      "taskStarted": "收集任务已启动",
      "estimatedTime": "2-5 分钟",
      "currentStep": "正在收集 GitHub 资源...",
      "resourcesFound": "个资源",
      "timeRemaining": "1 分钟"
    },
    "components": {
      "title": "组件文档",
      "subtitle": "项目中主要 React 组件的使用说明",
      "mcpCollectorTool": "MCP 资源收集工具的主要组件",
      "languageSwitcher": "语言切换组件",
      "features": "功能特性：",
      "supportedLanguages": "支持的语言：",
      "usageExample": "使用示例：",
      "featuresList": {
        "customKeywords": "自定义搜索关键词",
        "realTimeProgress": "实时进度显示",
        "resourceFiltering": "资源分类和筛选",
        "dataVisualization": "统计数据可视化",
        "exportFormats": "导出 JSON/CSV 格式"
      }
    },
    "deployment": {
      "title": "部署指南",
      "subtitle": "如何将项目部署到生产环境",
      "vercelDeployment": "Vercel 部署（推荐）",
      "netlifyDeployment": "Netlify 部署",
      "dockerDeployment": "Docker 部署",
      "vercelDescription": "Vercel 是 Next.js 的原生部署平台，提供最佳的性能和体验。",
      "netlifyDescription": "Netlify 也提供了优秀的静态网站托管服务。",
      "dockerDescription": "使用 Docker 容器化部署。",
      "steps": "步骤：",
      "buildSettings": "构建设置：",
      "dockerfile": "Dockerfile：",
      "buildAndRun": "构建和运行：",
      "cliDeployment": "命令行部署：",
      "deploymentSteps": {
        "pushToGithub": "1. 将代码推送到 GitHub 仓库",
        "importProject": "2. 在 Vercel 中导入项目",
        "configureEnv": "3. 配置环境变量（如需要）",
        "deploy": "4. 点击部署"
      }
    },
    "configuration": {
      "title": "配置说明",
      "subtitle": "项目的各种配置文件和选项说明",
      "i18nConfig": "国际化配置",
      "nextjsConfig": "Next.js 配置",
      "tailwindConfig": "Tailwind CSS 配置",
      "configFile": "配置文件：",
      "addNewLanguage": "添加新语言：",
      "languageSteps": {
        "step1": "1. 在 messages/ 目录添加新的语言文件",
        "step2": "2. 更新 middleware.ts 中的 locales 数组",
        "step3": "3. 在 LanguageSwitcher 组件中添加新选项"
      }
    }
  }
} 