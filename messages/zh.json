{
  "common": {
    "language": "语言",
    "english": "英文",
    "chinese": "中文",
    "menu": "菜单",
    "close": "关闭"
  },
  "navigation": {
    "features": "功能特性",
    "playground": "交互体验",
    "docs": "技术文档",
    "resources": "学习资源", 
    "servers": "MCP 服务器",
    "blog": "技术博客",
    "faq": "常见问题"
  },
  "hero": {
    "title": "让 AI 上下文理解成为可能",
    "subtitle": "赋能 AI 应用进入 MCP 标准化时代，实现上下文、协议与模型的真正协作",
    "tryPlayground": "体验演示",
    "readDocs": "阅读文档"
  },
  "features": {
    "title": "MCP 核心能力",
    "subtitle": "探索构成 MCP 成为 AI 上下文管理未来的三大基础支柱",
    "contextStandardization": {
      "title": "上下文标准化",
      "description": "建立统一的上下文协议，实现不同 AI 模型和应用之间的无缝通信，确保跨平台的一致理解。"
    },
    "multiModelCollaboration": {
      "title": "多模型协作", 
      "description": "通过标准化接口实现多个 AI 模型的动态协作，允许复杂任务在专业化模型能力间分布执行。"
    },
    "serverArchitecture": {
      "title": "服务器架构",
      "description": "部署可扩展的 MCP 服务器，管理上下文、处理协议通信，并以企业级可靠性编排 AI 模型交互。"
    }
  },
  "playground": {
    "title": "MCP 资源收集工具",
    "subtitle": "智能搜索和收集 MCP 相关资源，生成详细的分析报告",
    "documentUpload": {
      "title": "文档上传",
      "description": "上传和处理各种文档格式，为 AI 模型建立丰富的上下文"
    },
    "contextConfiguration": {
      "title": "上下文配置", 
      "description": "设置和管理上下文参数，优化 AI 模型性能和理解能力"
    },
    "modelSelection": {
      "title": "模型选择",
      "description": "从多个 AI 模型中选择，并为复杂任务配置协作模式"
    },
    "launchPlayground": "启动演示",
    "collector": {
      "tabs": {
        "collector": "资源收集器",
        "results": "收集结果",
        "stats": "统计分析",
        "favorites": "我的收藏"
      },
      "keywords": {
        "label": "搜索关键词 (用逗号分隔)",
        "placeholder": "输入自定义关键词，留空使用默认关键词"
      },
      "options": {
        "label": "收集选项",
        "includeGithub": "包含 GitHub 项目搜索"
      },
      "buttons": {
        "startCollection": "开始收集",
        "collecting": "收集中...",
        "viewDetailedReport": "查看详细报告",
        "exportJson": "导出 JSON",
        "exportCsv": "导出 CSV"
      },
      "progress": {
        "step": "步骤",
        "collected": "已收集",
        "resources": "个资源",
        "current": "当前"
      },
      "success": {
        "title": "收集完成！",
        "message": "共找到 {count} 个模型上下文协议资源，请查看下方的收集结果。"
      },
      "bestPractices": {
        "title": "模型上下文协议代理使用最佳实践与学习路径",
        "learningPath": {
          "title": "📚 推荐学习路径",
          "beginner": {
            "title": "理解基础概念",
            "duration": "预计 3-5 天",
            "subtitle": "模型上下文协议快速入门",
            "step1": "Day 1: 阅读官方文档基础部分",
            "step2": "第二天：安装 Python 软件开发包并运行第一个示例",
            "step3": "第三天：配置 Claude 桌面版集成",
            "step4": "第四至五天：尝试文件系统服务器"
          },
          "intermediate": {
            "title": "动手实践",
            "duration": "预计 1-2 周",
            "subtitle": "自定义服务器开发",
            "step1": "Week 1: 深入理解MCP协议规范",
            "step2": "研究多个服务器实现案例",
            "step3": "Week 2: 开发你的第一个自定义服务器",
            "step4": "集成外部API和数据库"
          },
          "advanced": {
            "title": "构建应用",
            "duration": "持续学习",
            "subtitle": "生态系统贡献",
            "step1": "构建企业级MCP解决方案",
            "step2": "为开源社区贡献代码",
            "step3": "编写教程和最佳实践文档",
            "step4": "参与协议标准制定"
          }
        },
        "useCases": {
          "title": "🛠️ 实际应用案例",
          "fileManager": {
            "title": "文件管理助手",
            "description": "使用文件系统服务器让Claude帮你管理本地文件",
            "tags": {
              "beginner": "初学者友好",
              "official": "官方示例"
            }
          },
          "codeAnalysis": {
            "title": "代码仓库分析",
            "description": "连接Git仓库，让Claude分析代码结构和历史",
            "tags": {
              "intermediate": "中等难度",
              "devTool": "开发工具"
            }
          },
          "dbHelper": {
            "title": "数据库查询助手",
            "description": "连接PostgreSQL，让Claude帮你写复杂SQL查询",
            "tags": {
              "advanced": "高级应用",
              "dataAnalysis": "数据分析"
            }
          },
          "apiHub": {
            "title": "API集成中心",
            "description": "创建统一接口，让Claude访问多个第三方API",
            "tags": {
              "enterprise": "企业级",
              "integration": "集成方案"
            }
          }
        },
        "tips": {
          "title": "💡 开发技巧与注意事项",
          "bestPractices": {
            "title": "最佳实践",
            "tip1": "始终验证输入参数的有效性",
            "tip2": "提供清晰的错误消息和日志",
            "tip3": "使用类型提示提高代码质量",
            "tip4": "实现适当的权限和安全检查",
            "tip5": "编写单元测试覆盖核心功能",
            "tip6": "遵循官方命名和结构约定"
          },
          "pitfalls": {
            "title": "常见陷阱",
            "tip1": "不要在服务器中存储敏感信息",
            "tip2": "避免阻塞操作影响响应性能",
            "tip3": "注意处理大文件和内存使用",
            "tip4": "确保跨平台兼容性",
            "tip5": "不要忽略版本兼容性问题",
            "tip6": "避免过度复杂的嵌套结构"
          }
        },
        "priorityResources": {
          "title": "🌟 推荐优先学习的资源",
          "officialDocs": {
            "title": "官方文档",
            "description": "权威、全面、及时更新"
          },
          "pythonSdk": {
            "title": "Python SDK",
            "description": "最成熟的开发工具"
          },
          "fileSystemExample": {
            "title": "文件系统示例",
            "description": "最佳入门起点"
          }
        }
      },
      "faq": {
        "title": "MCP Agent 常见问题解答",
        "questions": {
          "whatIsMcp": {
            "question": "什么是 Model Context Protocol (MCP)?",
            "answer": "MCP 是 Anthropic 开发的开放协议，让AI助手能够安全地访问外部数据和工具。它建立了标准化的连接方式，使得Claude等AI可以与各种服务和数据源进行交互。"
          },
          "skillsRequired": {
            "question": "我需要什么技能才能开始使用 MCP?",
            "answer": "基础使用只需要会安装软件和阅读文档。如果要开发自定义服务器，建议掌握 Python 或 TypeScript 基础知识。大部分教程都有详细的步骤说明。"
          },
          "systemRequirements": {
            "question": "MCP 服务器运行需要什么环境?",
            "answer": "大多数 MCP 服务器可以在本地运行，支持 Windows、macOS 和 Linux。Python 服务器需要 Python 3.10+，TypeScript 服务器需要 Node.js 18+。"
          },
          "claudeIntegration": {
            "question": "如何与 Claude Desktop 集成?",
            "answer": "需要修改 Claude Desktop 的配置文件，添加 MCP 服务器信息。具体路径：Windows 在 %APPDATA%/Claude/，macOS 在 ~/Library/Application Support/Claude/。"
          },
          "security": {
            "question": "MCP 安全吗？会不会泄露数据?",
            "answer": "MCP 设计了严格的权限控制机制。服务器只能访问明确授权的资源，AI 不能直接执行系统命令。但仍建议不要在生产环境中暴露敏感数据。"
          },
          "troubleshooting": {
            "question": "遇到问题时应该怎么排查?",
            "answer": "首先检查服务器日志和 Claude Desktop 的连接状态。大多数问题都是配置错误或依赖缺失导致的。GitHub Issues 和社区论坛有很多解决方案。"
          }
        },
        "quickLinks": {
          "title": "🔗 快速链接",
          "quickStart": "官方快速开始",
          "serverExamples": "官方服务器示例",
          "pythonSdk": "Python SDK",
          "typescriptSdk": "TypeScript SDK"
        }
      },
      "results": {
        "noResults": {
          "title": "暂无收集结果，请先开始收集",
          "subtitle": "没有符合筛选条件的资源"
        },
        "filterAll": "全部",
        "priority": {
          "high": "高",
          "medium": "中", 
          "low": "低",
          "label": "优先级"
        },
        "rating": "评分"
      },
      "stats": {
        "learningAdvice": {
          "title": "基于收集结果的学习建议",
          "insights": {
            "title": "📊 数据洞察",
            "totalResources": "共收集到 {count} 个相关资源",
            "typesCount": "涵盖 {count} 种不同类型",
            "languagesCount": "支持 {count} 种语言",
            "sourcesCount": "来自 {count} 个不同来源"
          },
          "recommendations": {
            "title": "🎯 学习重点",
            "documentation": "优先阅读 {count} 个官方文档",
            "tutorial": "跟随 {count} 个教程进行实践",
            "tool": "尝试使用 {count} 个开发工具",
            "example": "研究 {count} 个实际示例"
          }
        },
        "personalizedPlan": {
          "title": "AI生成的个性化学习计划",
          "beginnerPath": "新手路径",
          "intermediatePath": "进阶路径",
          "expertPath": "专家路径"
        },
        "toolbox": {
          "title": "开发者实用工具箱",
          "codeGenerator": {
            "title": "代码生成器",
            "description": "基于模板快速生成MCP服务器骨架代码"
          },
          "debugHelper": {
            "title": "调试助手",
            "description": "实时监控MCP连接状态和消息流"
          },
          "configManager": {
            "title": "配置管理",
            "description": "统一管理多个MCP服务器配置"
          },
          "deployTool": {
            "title": "部署工具",
            "description": "一键部署到Docker、云服务等平台"
          }
        },
        "distribution": {
          "byType": "按类型分布",
          "bySource": "按来源分布",
          "byLanguage": "按语言分布",
          "topTags": "热门标签"
        }
      },
      "favorites": {
        "noFavorites": {
          "title": "暂无收藏资源",
          "subtitle": "在收集结果中点击⭐按钮即可收藏喜欢的资源",
          "startCollecting": "开始收集资源"
        },
        "stats": {
          "title": "我的收藏资源库",
          "total": "总收藏",
          "types": "资源类型",
          "sources": "资源来源",
          "avgRating": "平均评分"
        },
        "toggleFavorite": "收藏",
        "removeFavorite": "取消收藏"
      }
    }
  },
  "documentation": {
    "title": "技术文档",
    "subtitle": "涵盖 MCP 协议结构、服务器架构和 API 实现细节的全面指南",
    "quickStart": {
      "title": "快速开始",
      "description": "通过我们的分步指南在几分钟内开始使用 MCP"
    },
    "protocolSpec": {
      "title": "协议规范",
      "description": "完整的 MCP 协议文档和标准"
    },
    "serverDevelopment": {
      "title": "服务器开发",
      "description": "构建和部署您自己的 MCP 服务器"
    },
    "apiReference": {
      "title": "API 参考",
      "description": "所有 MCP 端点的详细 API 文档"
    },
    "examples": {
      "title": "代码示例",
      "description": "真实世界的示例和实现模式"
    },
    "bestPractices": {
      "title": "最佳实践",
      "description": "MCP 实现的专家建议"
    }
  },
  "resources": {
    "title": "MCP 学习资源",
    "subtitle": "学习和实现模型上下文协议的全面资源集合",
    "officialDocs": {
      "title": "官方文档",
      "description": "来自 MCP 社区的权威资源"
    },
    "platformGuides": {
      "title": "平台指南", 
      "description": "主要 AI 平台的实现指南"
    },
    "communityResources": {
      "title": "社区资源",
      "description": "来自社区的教程、文章和讨论"
    },
    "viewResource": "查看资源",
    "externalLink": "外部链接"
  },
  "servers": {
    "title": "MCP 服务器",
    "subtitle": "发现和探索可用的 MCP 服务器及其功能",
    "serverDirectory": {
      "title": "服务器目录", 
      "description": "浏览 MCP 服务器的综合目录"
    },
    "communityServers": {
      "title": "社区服务器",
      "description": "由社区构建和维护的服务器"
    },
    "discussions": {
      "title": "社区讨论",
      "description": "加入关于 MCP 实现和使用的对话"
    },
    "exploreServers": "探索服务器"
  },
  "footer": {
    "description": "通过标准化协议和协作架构让 AI 上下文理解成为可能。",
    "quickLinks": "快捷链接",
    "resources": "学习资源", 
    "community": "社区",
    "copyright": "© 2025 AIMCP. 保留所有权利。"
  },
  "docs": {
    "title": "技术文档",
    "subtitle": "AIMCP 项目完整技术指南",
    "navigation": "文档导航",
    "gettingStarted": {
      "title": "快速开始",
      "subtitle": "按照以下步骤快速设置和运行 AIMCP 项目",
      "systemRequirements": "系统要求",
      "installationSteps": "安装步骤",
      "step1": "1. 克隆项目仓库：",
      "step2": "2. 安装依赖：",
      "step3": "3. 启动开发服务器：",
      "step4": "4. 在浏览器中访问：",
      "requirements": {
        "nodejs": "Node.js 18.0 或更高版本",
        "npm": "npm 或 yarn 包管理器",
        "git": "Git 版本控制",
        "browser": "现代浏览器（Chrome、Firefox、Safari、Edge）"
      }
    },
    "architecture": {
      "title": "项目架构",
      "subtitle": "了解 AIMCP 项目的技术架构和组件设计",
      "techStack": "技术栈",
      "directoryStructure": "目录结构",
      "frontend": "前端框架",
      "uiComponents": "UI 组件",
      "i18n": "国际化",
      "devTools": "开发工具",
      "i18nSupport": "中英双语支持",
      "dynamicRoutes": "动态路由"
    },
    "api": {
      "title": "API 文档",
      "subtitle": "详细的 API 接口说明和使用示例",
      "mcpCollectApi": "MCP 资源收集 API",
      "progressApi": "进度查询 API",
      "startCollection": "启动 MCP 资源收集任务",
      "queryProgress": "查询收集任务进度",
      "requestParams": "请求参数：",
      "responseExample": "响应示例：",
      "queryParams": "查询参数：",
      "taskStarted": "收集任务已启动",
      "estimatedTime": "2-5 分钟",
      "currentStep": "正在收集 GitHub 资源...",
      "resourcesFound": "个资源",
      "timeRemaining": "1 分钟"
    },
    "components": {
      "title": "组件文档",
      "subtitle": "项目中主要 React 组件的使用说明",
      "mcpCollectorTool": "MCP 资源收集工具的主要组件",
      "languageSwitcher": "语言切换组件",
      "features": "功能特性：",
      "supportedLanguages": "支持的语言：",
      "usageExample": "使用示例：",
      "featuresList": {
        "customKeywords": "自定义搜索关键词",
        "realTimeProgress": "实时进度显示",
        "resourceFiltering": "资源分类和筛选",
        "dataVisualization": "统计数据可视化",
        "exportFormats": "导出 JSON/CSV 格式"
      }
    },
    "deployment": {
      "title": "部署指南",
      "subtitle": "如何将项目部署到生产环境",
      "vercelDeployment": "Vercel 部署（推荐）",
      "netlifyDeployment": "Netlify 部署",
      "dockerDeployment": "Docker 部署",
      "vercelDescription": "Vercel 是 Next.js 的原生部署平台，提供最佳的性能和体验。",
      "netlifyDescription": "Netlify 也提供了优秀的静态网站托管服务。",
      "dockerDescription": "使用 Docker 容器化部署。",
      "steps": "步骤：",
      "buildSettings": "构建设置：",
      "dockerfile": "Dockerfile：",
      "buildAndRun": "构建和运行：",
      "cliDeployment": "命令行部署：",
      "deploymentSteps": {
        "pushToGithub": "1. 将代码推送到 GitHub 仓库",
        "importProject": "2. 在 Vercel 中导入项目",
        "configureEnv": "3. 配置环境变量（如需要）",
        "deploy": "4. 点击部署"
      }
    },
    "configuration": {
      "title": "配置说明",
      "subtitle": "项目的各种配置文件和选项说明",
      "i18nConfig": "国际化配置",
      "nextjsConfig": "Next.js 配置",
      "tailwindConfig": "Tailwind CSS 配置",
      "configFile": "配置文件：",
      "addNewLanguage": "添加新语言：",
      "languageSteps": {
        "step1": "1. 在 messages/ 目录添加新的语言文件",
        "step2": "2. 更新 middleware.ts 中的 locales 数组",
        "step3": "3. 在 LanguageSwitcher 组件中添加新选项"
      }
    }
  }
} 